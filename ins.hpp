/*
 *      ps3spu module for the Interactive disassembler (IDA).
 *
 *      updates, fixes and bugreports welcomed (you know where i am)
 *
 *      (w)2011 by Jack Chen, aka anita999
 */

#ifndef __INSTRS_HPP
#define __INSTRS_HPP

extern instruc_t Instructions[];

enum nameNum {

ps3spu_null=0, //unknown opcode

ps3spu_lqd= 1 ,    //lqd Load Quadword (d-form) 32
ps3spu_lqx= 2 ,    //lqx Load Quadword (x-form) 33
ps3spu_lqa= 3 ,    //lqa Load Quadword (a-form) 34
ps3spu_lqr= 4 ,    //lqr Load Quadword Instruction Relative (a-form) 35
ps3spu_stqd= 5 ,    //stqd Store Quadword (d-form) 36
ps3spu_stqx= 6 ,    //stqx Store Quadword (x-form) 37
ps3spu_stqa= 7 ,    //stqa Store Quadword (a-form) 38
ps3spu_stqr= 8 ,    //stqr Store Quadword Instruction Relative (a-form) 39
ps3spu_cbd= 9 ,    //cbd Generate Controls for Byte Insertion (d-form) 40
ps3spu_cbx= 10 ,    //cbx Generate Controls for Byte Insertion (x-form) 41
ps3spu_chd= 11 ,    //chd Generate Controls for Halfword Insertion (d-form) 42
ps3spu_chx= 12 ,    //chx Generate Controls for Halfword Insertion (x-form) 43
ps3spu_cwd= 13 ,    //cwd Generate Controls for Word Insertion (d-form) 44
ps3spu_cwx= 14 ,    //cwx Generate Controls for Word Insertion (x-form) 45
ps3spu_cdd= 15 ,    //cdd Generate Controls for Doubleword Insertion (d-form) 46
ps3spu_cdx= 16 ,    //cdx Generate Controls for Doubleword Insertion (x-form) 47
ps3spu_ilh= 17 ,    //ilh Immediate Load Halfword 50
ps3spu_ilhu= 18 ,    //ilhu Immediate Load Halfword Upper 51
ps3spu_il= 19 ,    //il Immediate Load Word 52
ps3spu_ila= 20 ,    //ila Immediate Load Address 53
ps3spu_iohl= 21 ,    //iohl Immediate Or Halfword Lower 54
ps3spu_fsmbi= 22 ,    //fsmbi Form Select Mask for Bytes Immediate 55
ps3spu_ah= 23 ,    //ah Add Halfword 58
ps3spu_ahi= 24 ,    //ahi Add Halfword Immediate 59
ps3spu_a= 25 ,    //a Add Word 60
ps3spu_ai= 26 ,    //ai Add Word Immediate 61
ps3spu_sfh= 27 ,    //sfh Subtract from Halfword 62
ps3spu_sfhi= 28 ,    //sfhi Subtract from Halfword Immediate 63
ps3spu_sf= 29 ,    //sf Subtract from Word 64
ps3spu_sfi= 30 ,    //sfi Subtract from Word Immediate 65
ps3spu_addx= 31 ,    //addx Add Extended 66
ps3spu_cg= 32 ,    //cg Carry Generate 67
ps3spu_cgx= 33 ,    //cgx Carry Generate Extended 68
ps3spu_sfx= 34 ,    //sfx Subtract from Extended 69
ps3spu_bg= 35 ,    //bg Borrow Generate 70
ps3spu_bgx= 36 ,    //bgx Borrow Generate Extended 71
ps3spu_mpy= 37 ,    //mpy Multiply 72
ps3spu_mpyu= 38 ,    //mpyu Multiply Unsigned 73
ps3spu_mpyi= 39 ,    //mpyi Multiply Immediate 74
ps3spu_mpyui= 40 ,    //mpyui Multiply Unsigned Immediate 75
ps3spu_mpya= 41 ,    //mpya Multiply and Add 76
ps3spu_mpyh= 42 ,    //mpyh Multiply High 77
ps3spu_mpys= 43 ,    //mpys Multiply and Shift Right 78
ps3spu_mpyhh= 44 ,    //mpyhh Multiply High High 79
ps3spu_mpyhha= 45 ,    //mpyhha Multiply High High and Add 80
ps3spu_mpyhhu= 46 ,    //mpyhhu Multiply High High Unsigned 81
ps3spu_mpyhhau= 47 ,    //mpyhhau Multiply High High Unsigned and Add 82
ps3spu_clz= 48 ,    //clz Count Leading Zeros 83
ps3spu_cntb= 49 ,    //cntb Count Ones in Bytes 84
ps3spu_fsmb= 50 ,    //fsmb Form Select Mask for Bytes 85
ps3spu_fsmh= 51 ,    //fsmh Form Select Mask for Halfwords 86
ps3spu_fsm= 52 ,    //fsm Form Select Mask for Words 87
ps3spu_gbb= 53 ,    //gbb Gather Bits from Bytes 88
ps3spu_gbh= 54 ,    //gbh Gather Bits from Halfwords 89
ps3spu_gb= 55 ,    //gb Gather Bits from Words 90
ps3spu_avgb= 56 ,    //avgb Average Bytes 91
ps3spu_absdb= 57 ,    //absdb Absolute Differences of Bytes 92
ps3spu_sumb= 58 ,    //sumb Sum Bytes into Halfwords 93
ps3spu_xsbh= 59 ,    //xsbh Extend Sign Byte to Halfword 94
ps3spu_xshw= 60 ,    //xshw Extend Sign Halfword to Word 95
ps3spu_xswd= 61 ,    //xswd Extend Sign Word to Doubleword 96
ps3spu_and= 62 ,    //and And 97
ps3spu_andc= 63 ,    //andc And with Complement 98
ps3spu_andbi= 64 ,    //andbi And Byte Immediate 99
ps3spu_andhi= 65 ,    //andhi And Halfword Immediate 100
ps3spu_andi= 66 ,    //andi And Word Immediate 101
ps3spu_or= 67 ,    //or Or 102
ps3spu_orc= 68 ,    //orc Or with Complement 103
ps3spu_orbi= 69 ,    //orbi Or Byte Immediate 104
ps3spu_orhi= 70 ,    //orhi Or Halfword Immediate 105
ps3spu_ori= 71 ,    //ori Or Word Immediate 106
ps3spu_orx= 72 ,    //orx Or Across 107
ps3spu_xor= 73 ,    //xor Exclusive Or 108
ps3spu_xorbi= 74 ,    //xorbi Exclusive Or Byte Immediate 109
ps3spu_xorhi= 75 ,    //xorhi Exclusive Or Halfword Immediate 110
ps3spu_xori= 76 ,    //xori Exclusive Or Word Immediate 111
ps3spu_nand= 77 ,    //nand Nand 112
ps3spu_nor= 78 ,    //nor Nor 113
ps3spu_eqv= 79 ,    //eqv Equivalent 114
ps3spu_selb= 80 ,    //selb Select Bits 115
ps3spu_shufb= 81 ,    //shufb Shuffle Bytes 116
ps3spu_shlh= 82 ,    //shlh Shift Left Halfword 118
ps3spu_shlhi= 83 ,    //shlhi Shift Left Halfword Immediate 119
ps3spu_shl= 84 ,    //shl Shift Left Word 120
ps3spu_shli= 85 ,    //shli Shift Left Word Immediate 121
ps3spu_shlqbi= 86 ,    //shlqbi Shift Left Quadword by Bits 122
ps3spu_shlqbii= 87 ,    //shlqbii Shift Left Quadword by Bits Immediate 123
ps3spu_shlqby= 88 ,    //shlqby Shift Left Quadword by Bytes 124
ps3spu_shlqbyi= 89 ,    //shlqbyi Shift Left Quadword by Bytes Immediate 125
ps3spu_shlqbybi= 90 ,    //shlqbybi Shift Left Quadword by Bytes from Bit Shift Count 126
ps3spu_roth= 91 ,    //roth Rotate Halfword 127
ps3spu_rothi= 92 ,    //rothi Rotate Halfword Immediate 128
ps3spu_rot= 93 ,    //rot Rotate Word 129
ps3spu_roti= 94 ,    //roti Rotate Word Immediate 130
ps3spu_rotqby= 95 ,    //rotqby Rotate Quadword by Bytes 131
ps3spu_rotqbyi= 96 ,    //rotqbyi Rotate Quadword by Bytes Immediate 132
ps3spu_rotqbybi= 97 ,    //rotqbybi Rotate Quadword by Bytes from Bit Shift Count 133
ps3spu_rotqbi= 98 ,    //rotqbi Rotate Quadword by Bits 134
ps3spu_rotqbii= 99 ,    //rotqbii Rotate Quadword by Bits Immediate 135
ps3spu_rothm= 100 ,    //rothm Rotate and Mask Halfword 136
ps3spu_rothmi= 101 ,    //rothmi Rotate and Mask Halfword Immediate 137
ps3spu_rotm= 102 ,    //rotm Rotate and Mask Word 138
ps3spu_rotmi= 103 ,    //rotmi Rotate and Mask Word Immediate 139
ps3spu_rotqmby= 104 ,    //rotqmby Rotate and Mask Quadword by Bytes 140
ps3spu_rotqmbyi= 105 ,    //rotqmbyi Rotate and Mask Quadword by Bytes Immediate 141
ps3spu_rotqmbybi= 106 ,    //rotqmbybi Rotate and Mask Quadword Bytes from Bit Shift Count 142
ps3spu_rotqmbi= 107 ,    //rotqmbi Rotate and Mask Quadword by Bits 143
ps3spu_rotqmbii= 108 ,    //rotqmbii Rotate and Mask Quadword by Bits Immediate 144
ps3spu_rotmah= 109 ,    //rotmah Rotate and Mask Algebraic Halfword 145
ps3spu_rotmahi= 110 ,    //rotmahi Rotate and Mask Algebraic Halfword Immediate 146
ps3spu_rotma= 111 ,    //rotma Rotate and Mask Algebraic Word 147
ps3spu_rotmai= 112 ,    //rotmai Rotate and Mask Algebraic Word Immediate 148
ps3spu_heq= 113 ,    //heq Halt If Equal 150
ps3spu_heqi= 114 ,    //heqi Halt If Equal Immediate 151
ps3spu_hgt= 115 ,    //hgt Halt If Greater Than 152
ps3spu_hgti= 116 ,    //hgti Halt If Greater Than Immediate 153
ps3spu_hlgt= 117 ,    //hlgt Halt If Logically Greater Than 154
ps3spu_hlgti= 118 ,    //hlgti Halt If Logically Greater Than Immediate 155
ps3spu_ceqb= 119 ,    //ceqb Compare Equal Byte 156
ps3spu_ceqbi= 120 ,    //ceqbi Compare Equal Byte Immediate 157
ps3spu_ceqh= 121 ,    //ceqh Compare Equal Halfword 158
ps3spu_ceqhi= 122 ,    //ceqhi Compare Equal Halfword Immediate 159
ps3spu_ceq= 123 ,    //ceq Compare Equal Word 160
ps3spu_ceqi= 124 ,    //ceqi Compare Equal Word Immediate 161
ps3spu_cgtb= 125 ,    //cgtb Compare Greater Than Byte 162
ps3spu_cgtbi= 126 ,    //cgtbi Compare Greater Than Byte Immediate 163
ps3spu_cgth= 127 ,    //cgth Compare Greater Than Halfword 164
ps3spu_cgthi= 128 ,    //cgthi Compare Greater Than Halfword Immediate 165
ps3spu_cgt= 129 ,    //cgt Compare Greater Than Word 166
ps3spu_cgti= 130 ,    //cgti Compare Greater Than Word Immediate 167
ps3spu_clgtb= 131 ,    //clgtb Compare Logical Greater Than Byte 168
ps3spu_clgtbi= 132 ,    //clgtbi Compare Logical Greater Than Byte Immediate 169
ps3spu_clgth= 133 ,    //clgth Compare Logical Greater Than Halfword 170
ps3spu_clgthi= 134 ,    //clgthi Compare Logical Greater Than Halfword Immediate 171
ps3spu_clgt= 135 ,    //clgt Compare Logical Greater Than Word 172
ps3spu_clgti= 136 ,    //clgti Compare Logical Greater Than Word Immediate 173
ps3spu_br= 137 ,    //br Branch Relative 174
ps3spu_bra= 138 ,    //bra Branch Absolute 175
ps3spu_brsl= 139 ,    //brsl Branch Relative and Set Link in rt 176
ps3spu_brasl= 140 ,    //brasl Branch Absolute and Set Link in rt 177
ps3spu_bi= 141 ,    //bi Branch Indirect 178
ps3spu_iret= 142 ,    //iret Interrupt Return 179
ps3spu_bisled= 143 ,    //bisled Branch Indirect and Set Link if External Data 180
ps3spu_bisl= 144 ,    //bisl Branch Indirect and Set Link 181
ps3spu_brnz= 145 ,    //brnz Branch If Not Zero Word 182
ps3spu_brz= 146 ,    //brz Branch If Zero Word 183
ps3spu_brhnz= 147 ,    //brhnz Branch If Not Zero Halfword 184
ps3spu_brhz= 148 ,    //brhz Branch If Zero Halfword 185
ps3spu_biz= 149 ,    //biz Branch Indirect If Zero 186
ps3spu_binz= 150 ,    //binz Branch Indirect If Not Zero 187
ps3spu_bihz= 151 ,    //bihz Branch Indirect If Zero Halfword 188
ps3spu_bihnz= 152 ,    //bihnz Branch Indirect If Not Zero Halfword 189
ps3spu_hbr= 153 ,    //hbr Hint for Branch (r-form) 192
ps3spu_hbra= 154 ,    //hbra Hint for Branch (a-form) 193
ps3spu_hbrr= 155 ,    //hbrr Hint for Branch Relative 194
ps3spu_fa= 156 ,    //fa Floating Add 202
ps3spu_dfa= 157 ,    //dfa Double Floating Add 203
ps3spu_fs= 158 ,    //fs Floating Subtract 204
ps3spu_dfs= 159 ,    //dfs Double Floating Subtract 205
ps3spu_fm= 160 ,    //fm Floating Multiply 206
ps3spu_dfm= 161 ,    //dfm Double Floating Multiply 207
ps3spu_fma= 162 ,    //fma Floating Multiply and Add 208
ps3spu_dfma= 163 ,    //dfma Double Floating Multiply and Add 209
ps3spu_fnms= 164 ,    //fnms Floating Negative Multiply and Subtract 210
ps3spu_dfnms= 165 ,    //dfnms Double Floating Multiply and Subtract 211
ps3spu_fms= 166 ,    //fms Floating Multiply and Subtract 212
ps3spu_dfms= 167 ,    //dfms Double Floating Multiply and Subtract 213
ps3spu_dfnma= 168 ,    //dfnma Double Floating Negative Multiply and Add 214
ps3spu_frest= 169 ,    //frest Floating Reciprocal Estimate 215
ps3spu_frsqest= 170 ,    //frsqest Floating Reciprocal Absolute Square Root Estimate 217
ps3spu_fi= 171 ,    //fi Floating Interpolate 219
ps3spu_csflt= 172 ,    //csflt Convert Signed Integer to Floating 220
ps3spu_cflts= 173 ,    //cflts Convert Floating to Signed Integer 221
ps3spu_cuflt= 174 ,    //cuflt Convert Unsigned Integer to Floating 222
ps3spu_cfltu= 175 ,    //cfltu Convert Floating to Unsigned Integer 223
ps3spu_frds= 176 ,    //frds Floating Round Double to Single 224
ps3spu_fesd= 177 ,    //fesd Floating Extend Single to Double 225
ps3spu_dfceq= 178 ,    //dfceq Double Floating Compare Equal 226
ps3spu_dfcmeq= 179 ,    //dfcmeq Double Floating Compare Magnitude Equal 227
ps3spu_dfcgt= 180 ,    //dfcgt Double Floating Compare Greater Than 228
ps3spu_dfcmgt= 181 ,    //dfcmgt Double Floating Compare Magnitude Greater Than 229
ps3spu_dftsv= 182 ,    //dftsv Double Floating Test Special Value 230
ps3spu_fceq= 183 ,    //fceq Floating Compare Equal 231
ps3spu_fcmeq= 184 ,    //fcmeq Floating Compare Magnitude Equal 232
ps3spu_fcgt= 185 ,    //fcgt Floating Compare Greater Than 233
ps3spu_fcmgt= 186 ,    //fcmgt Floating Compare Magnitude Greater Than 234
ps3spu_fscrrd= 187 ,    //fscrrd Floating-Point Status and Control Register Write 235
ps3spu_fscrwr= 188 ,    //fscrwr Floating-Point Status and Control Register Read 236
ps3spu_stop= 189 ,    //stop Stop and Signal 238
ps3spu_stopd= 190 ,    //stopd Stop and Signal with Dependencies 239
ps3spu_lnop= 191 ,    //lnop No Operation (Load) 240
ps3spu_nop= 192 ,    //nop No Operation (Execute) 241
ps3spu_sync= 193 ,    //sync Synchronize 242
ps3spu_dsync= 194 ,    //dsync Synchronize Data 243
ps3spu_mfspr= 195 ,    //mfspr Move from Special-Purpose Register 244
ps3spu_mtspr= 196 ,    //mtspr Move to Special-Purpose Register 245
ps3spu_rdch= 197 ,    //rdch Read Channel 248
ps3spu_rchcnt= 198 ,    //rchcnt Read Channel Count 249
ps3spu_wrch= 199 ,    //wrch Write Channel 250


	ps3spu_last = 200  //total 199 instructions, not including NULL and this dummy one
};
#endif
